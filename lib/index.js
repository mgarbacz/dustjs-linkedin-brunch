// Generated by CoffeeScript 1.6.3
var DustCompiler, dust, fs, sysPath;

dust = require('dustjs-linkedin');

fs = require('fs');

sysPath = require('path');

module.exports = DustCompiler = (function() {
  DustCompiler.prototype.brunchPlugin = true;

  DustCompiler.prototype.type = 'template';

  DustCompiler.prototype.extension = 'dust';

  function DustCompiler(config) {
    var _ref, _ref1;
    this.config = config;
    if ((_ref = this.config.plugins) != null ? (_ref1 = _ref.dust) != null ? _ref1.retainWhitespace : void 0 : void 0) {
      dust.optimizers.format = function(ctx, node) {
        return node;
      };
    }
  }

  DustCompiler.prototype.compile = function(data, path, callback) {
    var content, err, error, name, result, _ref;
    try {
      if ((_ref = this.config.modules) != null ? _ref.nameCleaner : void 0) {
        path = this.config.modules.nameCleaner(path);
      }
      name = path.replace(/\.dust$/, '');
      content = dust.compile(data, name);
      return result = "var tmpl = " + content + "\nmodule.exports = tmpl;\nmodule.exports.requirePath = " + (JSON.stringify(name)) + ";\nmodule.exports.render = function(context, callback){return dust.render(" + (JSON.stringify(name)) + ", context, callback);};\nmodule.exports.stream = function(context){return dust.stream(" + (JSON.stringify(name)) + ", context);};";
    } catch (_error) {
      err = _error;
      return error = err;
    } finally {
      callback(error, result);
    }
  };

  DustCompiler.prototype.include = function() {
    var commonHelpers, commonHelpersClient, dustClient, dustHelpers, dustPackage, dustRoot, dustServer, dustVersion, includes, moduleNotFound;
    includes = [];
    try {
      dustServer = require.resolve('dustjs-linkedin');
    } catch (_error) {
      moduleNotFound = _error;
      dustServer = require.resolve('dust');
    }
    dustRoot = sysPath.resolve(dustServer, '../..');
    if (fs.existsSync(sysPath.resolve(dustRoot, 'dist/dust-core.js'))) {
      dustVersion = '';
    } else {
      dustPackage = require(sysPath.resolve(dustRoot, 'package.json')).version;
      dustVersion = '-' + dustPackage.version;
    }
    if (this.includeCompiler) {
      dustClient = sysPath.resolve(dustRoot, "dist/dust-full" + dustVersion + ".js");
    } else {
      dustClient = sysPath.resolve(dustRoot, "dist/dust-core" + dustVersion + ".js");
    }
    includes.push(dustClient);
    try {
      dustHelpers = require.resolve('dustjs-helpers');
      includes.push(dustHelpers);
    } catch (_error) {}
    try {
      commonHelpers = require.resolve('common-dustjs-helpers');
      commonHelpersClient = sysPath.resolve(commonHelpers, '../common-dustjs-helpers.js');
      includes.push(commonHelpersClient);
    } catch (_error) {}
    return includes;
  };

  return DustCompiler;

})();
